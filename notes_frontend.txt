1. Bootstrap CSS & javascript

we can load CSS & Javascript styles for frontend from the Bootstrap website: https://getbootstrap.com/docs/5.1/getting-started/introduction/


the app -> views -> layouts -> application.html.erb file contains a stylesheet_link_tag and javascript_pack_tag these load CSS & Javascript respectively from rails application

from the bootstap website we will add the following CSS bootstrap into the body of head
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/css/bootstrap.min.css" rel="stylesheet" integrity="sha384-1BmE4kWBq78iYhFldvKuhfTAU6auU8tT94WrHftjDbrCEXSU1oBoqyl2QvZ6jIW3" crossorigin="anonymous">
and the following bundle line for Javascript
<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.1.3/dist/js/bootstrap.bundle.min.js" integrity="sha384-ka7Sk0Gln4gmtz2MlQnikT1wXgYsOg+OMhuP+IlRH9sENBO0LRn5q+8nbTov4+1p" crossorigin="anonymous"></script>

the other routes like localhost:3000/about is stil stuck with its default view
in order to apply bootstrap for these we will wrap our yield in a container
<div class="container">    
    <%= yield %>
</div>

from bootatrap we will grab a navbar: https://getbootstrap.com/docs/5.1/components/navbar/
if we add this code to application.html.erb it will look messy, so we will create another view
  <body>
  <div class="container">
    <%= render partial: "shared/navbar" %>
    <%= yield %>
  </div>
  </body>
 we will create app -> views -> shared -> _navbar.html.erb, we call new file shared because all of our views will share the navbar
since this is a partial it has to start with an underscore
we will paste code for our navbar here and change its items to look as follows
<li class="nav-item">
  <a class="nav-link active" aria-current="page" href="/">Home</a>
  </li>
  <li class="nav-item">
    <a class="nav-link" href="/about">About</a>
  </li>
 we will replace all the "#" in href with "/<page_name>" because that is how we want our routes

 2. Helpers and link_to

 in development, sometimes we want to change the name of a specific route, this means we would have to search for all places where this route is referred to and change them one by one
 if we hardcoded this path numerous times, it would be a hassle to change it one by one
 luckily rails provides us with a ruby helper called link_to and you give it a name and a url you want to point to
 so the about page in navbar will look like this
<li class="nav-item">
  <%= link_to "About", about_path, class: "nav-link" %>
  <a class="nav-link" href="/about">About</a>
</li>
link_to "About" is the content we want inside the anchor
url we want to point to is the about_path
class: "nav-link" maps to the anchor class it will generate
now we can change the about route once in routes.rb
for example, we can change about route as follows
get "about-us", to:"about#index", as: :about
the prefix will always be /about, but the url can change
if we leave out the as: :about part, the route path will be about_us, rails changes the hyphens to underscores

we will change all the navbar items to work with link_to helper methods, even the Navbar button itself